package doc.interfata;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;

import config.xsd.Constants;
import config.xsd.Executable;
import config.xsd.Task;
import config.xsd.Utility;
import config.xsd.XSDexeMapping;
import config.xsd.Workflow;

/**
 * 
 * @author Marius Peicu, Ovidiu Nistor
 */
public class WorkflowConfiguration extends javax.swing.JFrame {

	static final int WIDTH = 800;
	static final int HEIGHT = 600;
	public static WorkflowConfiguration workflowconfiguration;
	private XSDexeMapping t;
	public Workflow workflow = new Workflow();

	/**
	 * Creates new form fereastradoi
	 */
	public WorkflowConfiguration() {
		initWorkflowBackend();
		Dimension screenSize = java.awt.Toolkit.getDefaultToolkit()
				.getScreenSize();
		setLocation((int) screenSize.getWidth() / 2 - 300,
				(int) screenSize.getHeight() / 2 - 300);
		initComponents();
		setSize(WIDTH, HEIGHT);
		setResizable(false);
	}

	private void initWorkflowBackend() {
		t = new XSDexeMapping();
		t.init();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {

		setLayout(null);

		Insets insets = getInsets();

		final int HOFFSET = 25;
		final int VOFFSET = 50;
		final int VSPACING = 10;
		final int MAX_WIDTH = 200;

		panel1 = new JPanel();
		label1 = new JLabel("Binarization");
		comboBox1 = new JComboBox();
		List<Executable> list = t.getOptionsForStep(Constants.steps[0]);
		for (Executable item : list) {
			comboBox1.addItem(item.path);
		}

		panel1.add(label1);
		panel1.add(comboBox1);

		Dimension size1 = panel1.getPreferredSize();
		Rectangle b1 = new Rectangle(25 + insets.left
				+ (MAX_WIDTH - size1.width), VOFFSET + insets.top, size1.width,
				size1.height);
		panel1.setBounds(b1);
		add(panel1);

		panel2 = new JPanel();
		label2 = new JLabel("Layout");
		comboBox2 = new JComboBox();
		list = t.getOptionsForStep(Constants.steps[1]);
		for (Executable item : list) {
			comboBox2.addItem(item.path);
		}
		panel2.add(label2);
		panel2.add(comboBox2);

		Dimension size2 = panel2.getPreferredSize();
		Rectangle b2 = new Rectangle(HOFFSET + insets.left
				+ (MAX_WIDTH - size2.width), (b1.y + size1.height + VSPACING),
				size2.width, size2.height);
		panel2.setBounds(b2);
		add(panel2);

		panel3 = new JPanel();
		label3 = new JLabel("Paging");
		comboBox3 = new JComboBox();
		list = t.getOptionsForStep(Constants.steps[2]);
		for (Executable item : list) {
			comboBox3.addItem(item.path);
		}
		panel3.add(label3);
		panel3.add(comboBox3);

		Dimension size3 = panel3.getPreferredSize();
		Rectangle b3 = new Rectangle(HOFFSET + insets.left
				+ (MAX_WIDTH - size3.width), (b2.y + size2.height + VSPACING)
				+ insets.top, size3.width, size3.height);
		panel3.setBounds(b3);

		add(panel3);

		panel4 = new JPanel();
		label4 = new JLabel("OCR");
		comboBox4 = new JComboBox();
		list = t.getOptionsForStep(Constants.steps[3]);
		for (Executable item : list) {
			comboBox4.addItem(item.path);
		}
		panel4.add(label4);
		panel4.add(comboBox4);

		Dimension size4 = panel4.getPreferredSize();
		Rectangle b4 = new Rectangle(HOFFSET + insets.left
				+ (MAX_WIDTH - size4.width), (b3.y + size3.height + VSPACING)
				+ insets.top, size4.width, size4.height);
		panel4.setBounds(b4);

		add(panel4);

		panel5 = new JPanel();
		label5 = new JLabel("Hierarchy");
		comboBox5 = new JComboBox();
		list = t.getOptionsForStep(Constants.steps[4]);
		for (Executable item : list) {
			comboBox5.addItem(item.path);
		}
		panel5.add(label5);
		panel5.add(comboBox5);

		Dimension size5 = panel5.getPreferredSize();
		Rectangle b5 = new Rectangle(HOFFSET + insets.left
				+ (MAX_WIDTH - size5.width), (b4.y + size4.height + VSPACING)
				+ insets.top, size5.width, size5.height);
		panel5.setBounds(b5);

		add(panel5);

		panel6 = new JPanel();
		label6 = new JLabel("PDF Export");
		comboBox6 = new JComboBox();
		list = t.getOptionsForStep(Constants.steps[5]);
		for (Executable item : list) {
			comboBox6.addItem(item.path);
		}
		panel6.add(label6);
		panel6.add(comboBox6);

		Dimension size6 = panel6.getPreferredSize();
		Rectangle b6 = new Rectangle(HOFFSET + insets.left
				+ (MAX_WIDTH - size6.width), (b5.y + size5.height + VSPACING)
				+ insets.top, size6.width, size6.height);
		panel6.setBounds(b6);
		add(panel6);

		comboBox1.insertItemAt("-", 0);
		comboBox2.insertItemAt("-", 0);
		comboBox3.insertItemAt("-", 0);
		comboBox4.insertItemAt("-", 0);
		comboBox5.insertItemAt("-", 0);
		comboBox6.insertItemAt("-", 0);

		comboBox1.setSelectedIndex(0);
		comboBox2.setSelectedIndex(0);
		comboBox3.setSelectedIndex(0);
		comboBox4.setSelectedIndex(0);
		comboBox5.setSelectedIndex(0);
		comboBox6.setSelectedIndex(0);

		jButton4 = new JButton();
		jButton5 = new JButton();
		jButton3 = new javax.swing.JButton();
		jButton1 = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1 = new JLabel("Select workflow template");
		jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14));
		Dimension sizeTitle = jLabel1.getPreferredSize();
		Rectangle bjLabel1 = new Rectangle(340, 210, sizeTitle.width,
				sizeTitle.height);
		jLabel1.setBounds(bjLabel1);
		add(jLabel1);

		jButton3.setText("Back <");
		jButton3.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				actionBack();
			}
		});
		Dimension sizeBack = jButton3.getPreferredSize();
		Rectangle bjButton3 = new Rectangle(10, 510, sizeBack.width,
				sizeBack.height);
		jButton3.setBounds(bjButton3);
		add(jButton3);

		jButton4.setText("Save Template");
		jButton4.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// Workflowconfiguration.workflowconfiguration.
				JFileChooser fc = new JFileChooser();
				int returnVal = fc.showSaveDialog(workflowconfiguration);
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					File file = fc.getSelectedFile();
					createWorkflow();
					workflow.save(file.getAbsolutePath());
				}
			}
		});
		Dimension sizeSave = jButton4.getPreferredSize();
		Rectangle bjButton4 = new Rectangle(340, 510, sizeSave.width,
				sizeSave.height);
		jButton4.setBounds(bjButton4);
		add(jButton4);

		jButton5.setText("Load Template");
		jButton5.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				JFileChooser fc = new JFileChooser();
				int returnVal = fc.showOpenDialog(workflowconfiguration);

				if (returnVal == JFileChooser.APPROVE_OPTION) {
					File file = fc.getSelectedFile();
					// This is where a real application would open the file.

					workflow.load(file.getAbsolutePath());
					int numExecs = updateComboBox(comboBox1)
							+ updateComboBox(comboBox2)
							+ updateComboBox(comboBox3)
							+ updateComboBox(comboBox4)
							+ updateComboBox(comboBox5)
							+ updateComboBox(comboBox6);
					boolean hasExecs = (workflow.getNumTasks() == numExecs);
					if (!hasExecs) {
						Utility.showError("Nu toate executabilele din fisier sunt disponibile!");
						resetSelections();
					}
				}
			}
		});
		Dimension sizeLoad = jButton5.getPreferredSize();
		Rectangle bjButton5 = new Rectangle(340, 470, sizeLoad.width,
				sizeLoad.height);
		jButton5.setBounds(bjButton5);
		add(jButton5);

		jButton1.setText("> Start");
		jButton1.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				actionNext();
			}
		});

		Dimension sizeNext = jButton1.getPreferredSize();
		Rectangle bjButton1 = new Rectangle(690, 510, sizeNext.width,
				sizeNext.height);
		jButton1.setBounds(bjButton1);
		add(jButton1);

	}

	void resetSelections() {
		comboBox1.setSelectedIndex(0);
		comboBox2.setSelectedIndex(0);
		comboBox3.setSelectedIndex(0);
		comboBox4.setSelectedIndex(0);
		comboBox5.setSelectedIndex(0);
		comboBox6.setSelectedIndex(0);
	}

	int updateComboBox(JComboBox<String> comboBox) {
		comboBox.setSelectedIndex(0);
		int n = comboBox.getItemCount();
		
		for (int i = 0; i < n; ++i) {
			if (workflow.contains(Constants.EXECS_PATH + comboBox.getItemAt(i))) {
				comboBox.setSelectedIndex(i);
				System.out.println(comboBox.getItemAt(i));
				return 1;
			}
		}
		System.out.println("NotFound");
		return 0;
	}

	private void createWorkflow() {
		String[] execs = new String[6];
		execs[0] = (String) comboBox1.getSelectedItem();
		execs[1] = (String) comboBox2.getSelectedItem();
		execs[2] = (String) comboBox3.getSelectedItem();
		execs[3] = (String) comboBox4.getSelectedItem();
		execs[4] = (String) comboBox5.getSelectedItem();
		execs[5] = (String) comboBox6.getSelectedItem();

		StringBuffer xmlFile = new StringBuffer();
		xmlFile.append("<task_sequence>");
		for (int i = 0; i < 6; ++i) {
			if (!execs[i].equals("-")) {
				xmlFile.append(Task.getTaskStr(Constants.EXECS_PATH + execs[i],
						Constants.steps[i]));
			}
		}
		xmlFile.append("</task_sequence>");
		System.out.println(xmlFile);

		try {
			FileWriter fstream = new FileWriter(Constants.TMP_WORKFLOW_FILE);
			BufferedWriter fout = new BufferedWriter(fstream);
			fout.write(xmlFile.toString());

			fout.close();
		} catch (Exception e) {
			System.err.println("Error: " + e.getMessage());
		}

		workflow.load(Constants.TMP_WORKFLOW_FILE);
	}

	private void actionNext() {
		createWorkflow();
		workflow.execute(inputFiles);
	}

	private void actionBack() {
		MainFrame.mainFrame.setVisible(true);
		workflowconfiguration.setVisible(false);
	}

	public List<String> inputFiles;

	public void setInputFiles(List<String> selectedFiles) {
		inputFiles = selectedFiles;
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(
					WorkflowConfiguration.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(
					WorkflowConfiguration.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(
					WorkflowConfiguration.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(
					WorkflowConfiguration.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}

		workflowconfiguration = new WorkflowConfiguration();
		workflowconfiguration.setVisible(true);

	}

	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton3;
	private JButton jButton4;
	private JButton jButton5;
	private JComboBox<String> comboBox1;
	private JComboBox<String> comboBox2;
	private JComboBox<String> comboBox3;
	private JComboBox<String> comboBox4;
	private JComboBox<String> comboBox5;
	private JComboBox<String> comboBox6;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel label1;
	private javax.swing.JLabel label2;
	private javax.swing.JLabel label3;
	private javax.swing.JLabel label4;
	private javax.swing.JLabel label5;
	private javax.swing.JLabel label6;
	private javax.swing.JPanel panel1;
	private javax.swing.JPanel panel2;
	private javax.swing.JPanel panel3;
	private javax.swing.JPanel panel4;
	private javax.swing.JPanel panel5;
	private javax.swing.JPanel panel6;
}
